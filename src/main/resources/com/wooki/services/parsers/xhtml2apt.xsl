<!--

    Copyright 2009 Robin Komiwes, Bruno Verachten, Christophe Cordenier

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    	http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<?xml version="1.0" encoding="ISO-8859-1"?>	<!--		Based on		http://www.koders.com/noncode/fid44708004EF75F74F22B2ABE513161E129A91AE3B.aspx	--><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"	xmlns:html="http://www.w3.org/1999/xhtml" version="1.0">	<xsl:output method="text" encoding="ISO-8859-1" indent="no" />	<xsl:template match="html:body">		<xsl:apply-templates />	</xsl:template>	<xsl:template match="html:head">		<xsl:apply-templates select="html:title" />	</xsl:template>	<xsl:template match="html:title">		<xsl:text>&#x9;&#x9;&#x9;---&#xa;</xsl:text>  <xsl:variable name="title" select="translate(text(), '&#xAB;', '&quot;')"/>  <xsl:choose>  	<xsl:when test="string-length($title) &gt; 0">  	<xsl:value-of select="$title"/>  	</xsl:when>  <xsl:otherwise>  <xsl:text>Title not specified</xsl:text>  </xsl:otherwise>	  </xsl:choose>  <xsl:text>&#xa;</xsl:text>  <xsl:text>&#x9;&#x9;&#x9;---&#xa;</xsl:text>  <xsl:text>&#x9;&#x9;&#x9;---&#xa;</xsl:text>  <xsl:value-of select="../html:meta[@name='DCTERMS.issued']/@content"/>  <xsl:text>&#xa;</xsl:text>  <xsl:text>&#x9;&#x9;&#x9;---&#xa;</xsl:text></xsl:template><xsl:template match="html:html">  <xsl:apply-templates/></xsl:template><xsl:template match="html:div">  <xsl:apply-templates/>  <xsl:text>&#x0A;&#x0A;</xsl:text></xsl:template><xsl:template match="html:h1">  <xsl:text>&#x0A;</xsl:text>  <xsl:value-of select="translate(translate(translate(normalize-space(translate(.,'&#x0A;',' ')),'&#xAB;', '&quot;'), '&#xBB;', '&quot;'), '&#xA0;', ' ')"/>  <xsl:text>&#x0A;</xsl:text>  <xsl:apply-templates select="*"/>  <xsl:text>&#x0A;&#x0A;</xsl:text></xsl:template><xsl:template match="html:h2">	<xsl:if test="not(preceding::html:h1)">  <xsl:text>&#x0A;</xsl:text>	<xsl:text>Missing Main Section</xsl:text>  <xsl:text>&#x0A;</xsl:text>	</xsl:if>  <xsl:text>&#x0A;</xsl:text>  <xsl:text>*</xsl:text>  <xsl:value-of select="normalize-space(translate(., '&#xAB;', '&quot;'))"/>  <!--xsl:text>&#x0A;~~~~</xsl:text-->  <xsl:apply-templates select="html:*"/>  <xsl:text>&#x0A;&#x0A;</xsl:text></xsl:template><xsl:template match="html:h3">	<xsl:if test="not(preceding-sibling::*[1]=html:h2)">  <xsl:text>&#x0A;</xsl:text>	<xsl:text>*Missing SubSection</xsl:text>  <xsl:text>&#x0A;</xsl:text>	</xsl:if>  <xsl:text>&#x0A;</xsl:text>  <xsl:text>**</xsl:text>  <xsl:value-of select="normalize-space(translate(text(), '&#xAB;', '&quot;'))"/>  <!--xsl:text>&#x0A;~~~~</xsl:text-->  <xsl:apply-templates select="html:*"/>  <xsl:text>&#x0A;&#x0A;</xsl:text></xsl:template><xsl:template match="html:h4">  <xsl:text>&#x0A;</xsl:text>  <xsl:text>***</xsl:text>  <xsl:value-of select="translate(text(), '&#xAB;', '&quot;')"/>  <!--xsl:text>&#x0A;~~~~</xsl:text-->  <xsl:apply-templates select="html:*"/>  <xsl:text>&#x0A;&#x0A;</xsl:text></xsl:template><xsl:template match="html:a[@href]">  <xsl:text>{{{</xsl:text>  <xsl:value-of select="@href"/>  <xsl:text>}</xsl:text>  <xsl:value-of select="."/>  <xsl:text>}}</xsl:text></xsl:template><xsl:template match="html:ul|html:ol">  <xsl:text>&#x0A;</xsl:text>  <xsl:apply-templates select="html:li"/>  <xsl:text>&#x0A;&#x20;&#x20;[]&#x0A;</xsl:text></xsl:template><xsl:template match="html:li">  <xsl:text>&#x20;&#x20;*&#x20;</xsl:text>  <xsl:apply-templates/>  <xsl:text>&#x0A;</xsl:text></xsl:template><xsl:template match="html:p">  <xsl:text>&#x20;&#x20;</xsl:text>  <xsl:apply-templates/>  <xsl:text>&#xa;</xsl:text></xsl:template><xsl:template match="html:span">  <xsl:apply-templates/></xsl:template><xsl:template match="html:p/text()">  <xsl:value-of select="translate(translate(translate(.,'&#xA0;', ' '),'&#xAB;', '&quot;'),'&#xBB;', '&quot;')"/>  <!--xsl:text> </xsl:text--></xsl:template><xsl:template match="html:span/text()">  <xsl:value-of select="translate(., '  &#x9;', 'T ')"/>  <!--translate(., '  ', '&#x9;')--></xsl:template><xsl:template match="html:pre|html:p[@class='P4']|html:p[@class='P3']">  <xsl:if test="not(preceding-sibling::html:p[1][@class='P4']|preceding-sibling::html:p[1][@class='P3'])">    <xsl:text>&#xa;</xsl:text>    <xsl:text>+----+</xsl:text>    <xsl:text>&#xa;</xsl:text>  </xsl:if>  <!--xsl:value-of select="."/-->  <xsl:apply-templates/>  <xsl:if test="not(following-sibling::html:p[1][@class='P4']|following-sibling::html:p[1][@class='P3'])">    <xsl:text>&#xa;</xsl:text>    <xsl:text>+----+</xsl:text>    <xsl:text>&#xa;</xsl:text>  </xsl:if>  <xsl:text>&#xa;</xsl:text></xsl:template><xsl:template match="html:dfn">  <xsl:value-of select="."/>  <xsl:text> (&lt;{</xsl:text>  <xsl:value-of select="@title"/>  <xsl:text>}&gt;)</xsl:text></xsl:template><xsl:template match="html:img">  <xsl:text>[</xsl:text>  <xsl:value-of select="@src"/>  <xsl:text>] </xsl:text>  <xsl:value-of select="@alt"/></xsl:template><xsl:template match="html:em">  <xsl:text>&lt;</xsl:text>  <xsl:apply-templates/>  <xsl:text>&gt;</xsl:text></xsl:template><xsl:template match="html:strong">  <xsl:text>&lt;&lt;</xsl:text>  <xsl:apply-templates/>  <xsl:text>&gt;&gt;</xsl:text></xsl:template><xsl:template match="html:code">  <xsl:text>&lt;&lt;&lt;</xsl:text>  <xsl:apply-templates/>  <xsl:text>&gt;&gt;&gt;</xsl:text></xsl:template><!--xsl:template match="html:*">  <xsl:element name="{name(.)}">    <xsl:for-each select="@*">      <xsl:attribute name="{name(.)}">        <xsl:value-of select="."/>      </xsl:attribute>    </xsl:for-each>    <xsl:apply-templates/>  </xsl:element></xsl:template--><xsl:template match="html:br">  <xsl:text>&#xa;</xsl:text></xsl:template><xsl:template match="text()"/></xsl:stylesheet>